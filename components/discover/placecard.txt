import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { MapPin, Clock, Euro, Star, ExternalLink, Heart } from "lucide-react";
import { motion } from "framer-motion";

const categoryColors = {
  museo: "bg-blue-100 text-blue-800",
  galeria: "bg-purple-100 text-purple-800",
  teatro: "bg-red-100 text-red-800",
  concierto: "bg-green-100 text-green-800",
  exposicion: "bg-yellow-100 text-yellow-800",
  biblioteca: "bg-indigo-100 text-indigo-800",
  centro_cultural: "bg-pink-100 text-pink-800",
  cine: "bg-orange-100 text-orange-800",
  opera: "bg-violet-100 text-violet-800",
  danza: "bg-rose-100 text-rose-800"
};

export default function PlaceCard({ place, onFavorite, isFavorite }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      whileHover={{ scale: 1.02 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="overflow-hidden shadow-lg border-0 bg-white/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300">
        {place.image_url && (
          <div className="h-48 bg-gradient-to-br from-indigo-100 to-purple-100 relative overflow-hidden">
            <img 
              src={place.image_url} 
              alt={place.name}
              className="w-full h-full object-cover"
            />
            <div className="absolute top-3 right-3">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onFavorite(place)}
                className={`rounded-full backdrop-blur-sm ${
                  isFavorite ? 'bg-red-100 text-red-600' : 'bg-white/80 text-slate-600'
                } hover:scale-110 transition-all duration-200`}
              >
                <Heart className="w-4 h-4" fill={isFavorite ? 'currentColor' : 'none'} />
              </Button>
            </div>
          </div>
        )}
        
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start gap-3">
            <CardTitle className="text-lg font-bold text-slate-800 leading-tight">
              {place.name}
            </CardTitle>
            {place.rating && (
              <div className="flex items-center gap-1 bg-yellow-50 px-2 py-1 rounded-full">
                <Star className="w-4 h-4 text-yellow-500 fill-current" />
                <span className="text-sm font-semibold text-yellow-700">
                  {place.rating}
                </span>
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-2 mt-2">
            <Badge className={categoryColors[place.category] || "bg-gray-100 text-gray-800"}>
              {place.category?.replace('_', ' ')}
            </Badge>
            {place.price_range && (
              <Badge variant="outline" className="text-slate-600">
                {place.price_range}
              </Badge>
            )}
          </div>
        </CardHeader>

        <CardContent className="pt-0 space-y-3">
          <p className="text-sm text-slate-600 line-clamp-3">
            {place.description}
          </p>

          <div className="space-y-2 text-sm text-slate-600">
            {place.location?.address && (
              <div className="flex items-center gap-2">
                <MapPin className="w-4 h-4 text-indigo-500" />
                <span className="truncate">{place.location.address}</span>
              </div>
            )}
            
            {place.opening_hours && (
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4 text-green-500" />
                <span>{place.opening_hours}</span>
              </div>
            )}
            
            {place.avg_price && (
              <div className="flex items-center gap-2">
                <Euro className="w-4 h-4 text-amber-500" />
                <span>Desde {place.avg_price}€</span>
              </div>
            )}
          </div>

          {place.current_events && place.current_events.length > 0 && (
            <div className="mt-3">
              <h4 className="text-sm font-semibold text-slate-700 mb-2">Eventos actuales:</h4>
              <div className="space-y-1">
                {place.current_events.slice(0, 2).map((event, index) => (
                  <div key={index} className="text-xs text-slate-600 bg-slate-50 p-2 rounded-lg">
                    <span className="font-medium">{event.title}</span>
                    {event.price && <span className="ml-2">• {event.price}€</span>}
                  </div>
                ))}
              </div>
            </div>
          )}

          {place.website && (
            <Button
              variant="outline"
              className="w-full mt-3 hover:bg-indigo-50 hover:text-indigo-700 hover:border-indigo-300 transition-all duration-200"
              onClick={() => window.open(place.website, '_blank')}
            >
              <ExternalLink className="w-4 h-4 mr-2" />
              Visitar sitio web
            </Button>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}