import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Slider } from "@/components/ui/slider";
import { motion } from "framer-motion";
import { User as UserIcon, MapPin, Heart, Settings, Save } from "lucide-react";

const culturalInterests = [
  "Museos", "Galerías de Arte", "Teatro", "Música en Vivo", "Exposiciones",
  "Bibliotecas", "Centros Culturales", "Cine", "Ópera", "Danza"
];

export default function Profile() {
  const [user, setUser] = useState(null);
  const [preferences, setPreferences] = useState({
    max_distance: 10,
    max_budget: 50,
    interests: []
  });
  const [location, setLocation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      if (currentUser.preferences) {
        setPreferences(currentUser.preferences);
      }
      if (currentUser.location) {
        setLocation(currentUser.location);
      }
    } catch (error) {
      console.error("Error cargando usuario:", error);
    } finally {
      setLoading(false);
    }
  };

  const savePreferences = async () => {
    setSaving(true);
    try {
      await User.updateMyUserData({
        preferences,
        location
      });
      alert("Preferencias guardadas correctamente");
    } catch (error) {
      console.error("Error guardando preferencias:", error);
      alert("Error guardando preferencias");
    } finally {
      setSaving(false);
    }
  };

  const toggleInterest = (interest) => {
    const interests = preferences.interests || [];
    const newInterests = interests.includes(interest)
      ? interests.filter(i => i !== interest)
      : [...interests, interest];
    setPreferences({ ...preferences, interests: newInterests });
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-slate-600">Cargando perfil...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-purple-50 flex items-center justify-center">
        <Card className="max-w-md mx-auto shadow-xl">
          <CardContent className="text-center p-8">
            <UserIcon className="w-16 h-16 text-slate-400 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-slate-700 mb-2">
              Inicia sesión
            </h3>
            <p className="text-slate-500 mb-6">
              Para acceder a tu perfil necesitas iniciar sesión
            </p>
            <Button
              onClick={() => User.login()}
              className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700"
            >
              Iniciar sesión
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-indigo-50 to-purple-50 p-4 md:p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-3">
            Mi Perfil Cultural
          </h1>
          <p className="text-lg text-slate-600">
            Personaliza tu experiencia cultural
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-2 gap-6">
          <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <CardTitle className="text-xl font-bold text-slate-800 flex items-center gap-2">
                <UserIcon className="w-5 h-5 text-indigo-600" />
                Información Personal
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-sm font-semibold text-slate-700">Nombre</Label>
                <Input value={user.full_name || ""} disabled className="mt-1" />
              </div>
              
              <div>
                <Label className="text-sm font-semibold text-slate-700">Email</Label>
                <Input value={user.email || ""} disabled className="mt-1" />
              </div>

              {location && (
                <div>
                  <Label className="text-sm font-semibold text-slate-700 flex items-center gap-2">
                    <MapPin className="w-4 h-4 text-green-500" />
                    Ubicación guardada
                  </Label>
                  <div className="mt-2 p-3 bg-green-50 rounded-lg border border-green-200">
                    <p className="text-green-800 text-sm">{location.address}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <CardTitle className="text-xl font-bold text-slate-800 flex items-center gap-2">
                <Settings className="w-5 h-5 text-purple-600" />
                Preferencias de Búsqueda
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label className="text-sm font-semibold text-slate-700">
                  Distancia máxima: {preferences.max_distance} km
                </Label>
                <Slider
                  value={[preferences.max_distance]}
                  onValueChange={(value) => setPreferences({...preferences, max_distance: value[0]})}
                  max={50}
                  min={1}
                  step={1}
                  className="mt-2"
                />
              </div>

              <div>
                <Label className="text-sm font-semibold text-slate-700">
                  Presupuesto máximo: {preferences.max_budget}€
                </Label>
                <Slider
                  value={[preferences.max_budget]}
                  onValueChange={(value) => setPreferences({...preferences, max_budget: value[0]})}
                  max={200}
                  min={0}
                  step={5}
                  className="mt-2"
                />
              </div>

              <Button
                onClick={savePreferences}
                disabled={saving}
                className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700"
              >
                <Save className="w-4 h-4 mr-2" />
                {saving ? "Guardando..." : "Guardar Preferencias"}
              </Button>
            </CardContent>
          </Card>
        </div>

        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader className="pb-4">
            <CardTitle className="text-xl font-bold text-slate-800 flex items-center gap-2">
              <Heart className="w-5 h-5 text-pink-600" />
              Intereses Culturales
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {culturalInterests.map((interest) => (
                <Badge
                  key={interest}
                  variant={preferences.interests?.includes(interest) ? "default" : "outline"}
                  className={`cursor-pointer transition-all duration-200 ${
                    preferences.interests?.includes(interest)
                      ? 'bg-indigo-600 text-white hover:bg-indigo-700'
                      : 'hover:bg-indigo-50 hover:text-indigo-700'
                  }`}
                  onClick={() => toggleInterest(interest)}
                >
                  {interest}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}